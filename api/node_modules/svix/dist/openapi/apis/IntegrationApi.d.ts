import { BaseAPIRequestFactory } from 'svix/dist/openapi/apis/baseapi';
import { Configuration } from 'svix/dist/openapi/configuration';
import { RequestContext, ResponseContext, HttpInfo } from 'svix/dist/openapi/http/http';
import { IntegrationIn } from 'svix/dist/openapi/models/IntegrationIn';
import { IntegrationKeyOut } from 'svix/dist/openapi/models/IntegrationKeyOut';
import { IntegrationOut } from 'svix/dist/openapi/models/IntegrationOut';
import { IntegrationUpdate } from 'svix/dist/openapi/models/IntegrationUpdate';
import { ListResponseIntegrationOut } from 'svix/dist/openapi/models/ListResponseIntegrationOut';
import { Ordering } from 'svix/dist/openapi/models/Ordering';
export declare class IntegrationApiRequestFactory extends BaseAPIRequestFactory {
    v1IntegrationCreate(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationDelete(appId: string, integId: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationGet(appId: string, integId: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationGetKey(appId: string, integId: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationRotateKey(appId: string, integId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationUpdate(appId: string, integId: string, integrationUpdate: IntegrationUpdate, _options?: Configuration): Promise<RequestContext>;
}
export declare class IntegrationApiResponseProcessor {
    v1IntegrationCreateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationOut>>;
    v1IntegrationDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    v1IntegrationGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationOut>>;
    v1IntegrationGetKeyWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationKeyOut>>;
    v1IntegrationListWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListResponseIntegrationOut>>;
    v1IntegrationRotateKeyWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationKeyOut>>;
    v1IntegrationUpdateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<IntegrationOut>>;
}
